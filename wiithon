#!/usr/bin/python
# vim: set fileencoding=utf8 :
#
# :: Invasion Tux
# :: Ultima modificacion : miércoles, 15 de abril de 2009
# :: Script realizado por makiolo (makiolo@gmail.com)  (Licencia ver LICENCIA.txt)
# :: Ultima version : http://blogricardo.wordpress.com/2009/04/07/wiithon-wbfs-gui-para-wii/
# :: Dependencias : sudo apt-get install nautilus-actions imagemagick wget rar
#

import sys , os , subprocess , time , glob , fnmatch

# variables , cambialo si sabes lo que haces
RUTA = os.path.dirname(sys.argv[0]) # deben estar junto al script las dependencias
WBFS_APP = RUTA+"/"+"wbfs"
DETECTOR_WBFS = RUTA+"/"+"wiithon_autodetectar"
HOME = os.path.expanduser("~")
ACUERDO = HOME+"/.wiithon_acuerdo"

# Variables auxiliares ,  no modificar
DEVICE = ""
ISO = ""
COMANDO = ""
ID_JUEGO = ""
PAUSA = False
FABRICANTE = ""
listaISOS = []
correctos = []
erroneos = []
SALIDA_FORZADA = False
BLACK_LIST = "/\"\'$&|[]"
PARAMETROS = []

def comprobarExistencia(fichero):
	if(os.path.exists(fichero)):
		return True
	else:
		return False

def tieneCaracteresRaros(cadena):
	global BLACK_LIST
	# Lista negra de caracteres que hacen que deje de ser un expresion regular
	for i in range(len(cadena)):
		for j in range(len(BLACK_LIST)):
			if (cadena[i]==BLACK_LIST[j]):
				return True
	return False

def eliminarComillas(string):
	'''
	Primera letra				[:1]
	Ultima letra				[-1:]
	Todo excepto primera letra	[1:]
	Todo excepto ultima letra	[:-1]
	'''
	if( string[:1]=="'" or string[:1]=="\"" ):
		if( string[-1:]=="'" or string[-1:]=="\"" ):
			string = string[1:]
			string = string[:-1]
	return string

def getExtension(fichero):
	fichero = eliminarComillas(fichero)
	posPunto = fichero.rfind(".")
	return fichero[posPunto+1:len(fichero)].lower()

def getNombreFichero(fichero):
	fichero = eliminarComillas(fichero)
	posPunto = fichero.rfind(".")
	return fichero[0:posPunto]

def getMagicISO(imagenISO):
	f = open(imagenISO , "r")
	magic = f.read(6)
	f.close()
	return magic

def getListaJuegos(DEVICE):
	global WBFS_APP
	subProceso = getPopen("sudo "+WBFS_APP+" -p "+DEVICE+" ls")
	#Espera que acabe
	subProceso.wait()
	salida = []
	for linea in subProceso.stdout:
		cachos = linea.split(";")
		if(len(cachos)==3):
			#Elimina el salto de linea del ultimo cacho
			cachos[2] = cachos[2][:-1].split("\n")[0]
			#Añade el juego a la lista
			salida.append( [ cachos[0] , cachos[1] , cachos[2] ] )
	return salida

def get_IDJUEGO_de_Lista(DEVICE):
	listaIDGAME = getListaJuegos(DEVICE)
	numJuegos = len(listaIDGAME)
	if(numJuegos > 0):
		print "--------------------------------------------------------------------------------"
		print "%3s\t%6s\t%-40s\t%7s\t%6s" % ("NUM","IDGAME","TITULO","TAMAÑO" , "¿Car.?")
		print "--------------------------------------------------------------------------------"
		i = 1
		for IDGAME in listaIDGAME:
			ocupado = float(IDGAME[2])
			if (existeCaratula(IDGAME[0])):
				caratula = "SI"
			else:
				caratula = "NO"
			print "%3s\t%s\t%-40s\t%.2f GB\t%6s" % ( i , IDGAME[0] , IDGAME[1] , ocupado , caratula)
			i = i + 1
		print "--------------------------------------------------------------------------------"

		try:
			numJuego = int( raw_input("¿Indique el NUM del juego? : ") )
			# 1 <= numJuego <= numJuegos
			if ((1 <= numJuego) and (numJuego <= numJuegos)):
				try:
					return listaIDGAME[numJuego-1][0]
				except IndexError:
					print "Numero fuera de rango"
		except ValueError:
			print "El numero dado es incorrecto"
	return "DESCONOCIDO"


# Precondicion : DEVICE existe
def listarISOs(DEVICE):
	listaIDGAME = getListaJuegos(DEVICE)
	numJuegos = len(listaIDGAME)
	if(numJuegos > 0):
		print "--------------------------------------------------------------------------------"
		print "%6s\t%-55s\t%7s\t%6s" % ("IDGAME","TITULO","TAMAÑO" , "¿Car.?")
		print "--------------------------------------------------------------------------------"
		for IDGAME in listaIDGAME:
			ocupado = float(IDGAME[2])
			if (existeCaratula(IDGAME[0])):
				caratula = "SI"
			else:
				caratula = "NO"
			print "%s\t%-55s\t%.2f GB\t%6s" % ( IDGAME[0] , IDGAME[1] , ocupado , caratula)
		print "--------------------------------------------------------------------------------"
		print "\t\t\t\t\t\t\t%d juegos de WII" % numJuegos
	return numJuegos

# Precondicion : DEVICE existe
def mostrarEspacioLibre(DEVICE):
	global WBFS_APP
	subProceso = getPopen("sudo "+WBFS_APP+" -p "+DEVICE+" df")
	subProceso.wait()
	salida = ""
	for linea in subProceso.stdout:
		salida = salida + linea
	cachos = salida.split(";")
	if(len(cachos) == 3):
		print "\t\t\t\t\t\t\tUsado : %.2f GB" % float(cachos[0])
		print "\t\t\t\t\t\t\tLibre : %.2f GB" % float(cachos[1])
		print "\t\t\t\t\t\t\tTotal : %.2f GB" % float(cachos[2])
		return True
	else:
		return False

# Precondicion : DEVICE , ISO existen
def anadirISO(DEVICE , ISO):
	global WBFS_APP
	salida = os.system("sudo "+WBFS_APP+" -p "+DEVICE+" add \""+ISO+"\"")
	return salida == 0

# Precondicion : DEVICE , ISO existen
def renombrarISO(DEVICE , IDGAME , NUEVO_NOMBRE):
	global WBFS_APP
	salida = os.system("sudo "+WBFS_APP+" -p "+DEVICE+" rename "+IDGAME+" \""+NUEVO_NOMBRE+"\"")
	return salida == 0

def borrarJuego(DEVICE , ID_JUEGO):
	global WBFS_APP
	try:
		salida = os.system("sudo "+WBFS_APP+" -p "+DEVICE+" rm "+ID_JUEGO)
		return salida == 0
	except TypeError:
		return False

def extraerJuego(DEVICE , ID_JUEGO):
	global WBFS_APP
	salida = os.system("sudo "+WBFS_APP+" -p "+DEVICE+" extract "+ID_JUEGO)
	return salida == 0
	
def getPopen(comando):
	sp = subprocess
	return sp.Popen(comando.split() , stdout=sp.PIPE ,stderr=sp.STDOUT , close_fds=False , shell=False, universal_newlines= True)

def glob_get_dirs(path):
	''' 
	Devuelve una lista de directorios del directorio "path" 
	http://newspiritcompany.infogami.com/recursive_glob_py
	'''
	d = []
	try:
		for i in os.listdir(path):          
			if os.path.isdir(path+i):
				d.append(os.path.basename(i))

	except NameError, ne:
		print "NameError thrown=", ne
	except:
		#print sys.exc_info()[0]
		#print "ERROR en get_dirs()"
		pass
	return d

def rec_glob(path, mask):
	''' 
	Recursivo glob en el actual directorio 
	http://newspiritcompany.infogami.com/recursive_glob_py
	'''
	l = []
	if (sys.platform[:5] == "linux"):
		if path[-1] != '/':
			path = path + '/'
	else: # Realmente no lo he probado en windows
		if path[-1] != '\\':
			path = path + '\\'

	for i in glob_get_dirs(path):
		res = rec_glob(path + i, mask)
		l = l + res

	try:
		for i in os.listdir(path):
				
			ii = i
			i = path + i
			if os.path.isfile(i):
					# Lo parcheo para que no diferencie mayuculas
					#if fnmatch.fnmatch(ii, mask):
					if fnmatch.fnmatch(ii.lower() , mask):
							l.append(i)
	except NameError, ne:
		print "NameError=", ne
	except:
		#print sys.exc_info()[0]
		#print "ERROR en rec_glob()"
		pass
	return l
	
def informarAcuerdo():
	global SALIDA_FORZADA
	print "No me hago responsable de la aplicacion ni de la perdida de datos. No obstante, la particion NO va ha ser formateada, esta aplicacion añade , borra y lista juegos explicitamente mediante la ayuda de " + os.path.basename(WBFS_APP) + ". Esta información no volverá a aparecer si acepta el acuerdo."
	haElegido = False
	while( not haElegido ):
		respuesta = raw_input("Esta de acuerdo (S/N)? ")
		if  ( respuesta.lower() == "n" or respuesta.lower() == "no" ):
			print "No puedes usar esta aplicacion si no estas deacuerdo"
			SALIDA_FORZADA = True
		elif( respuesta.lower() == "s" or respuesta.lower() == "si" ):
			fAcuerdo = open(ACUERDO , "w")
			fAcuerdo.write("Acuerdo aceptado en la fecha " + time.asctime() + "\n")
			fAcuerdo.close()
			haElegido = True
		else:
			print "Opcion incorrecta"

def existeCaratula(IDGAME):
	return (comprobarExistencia(IDGAME+".png"))

def descargarCaratula(IDGAME):
	if (existeCaratula(IDGAME)):
		return True
	else:
		salida = os.system("wget --no-cache http://www.theotherzone.com/wii/pal/"+IDGAME+".png")
		if (salida == 0):
			salida = os.system("mogrify -resize 160x225 "+IDGAME+".png")
			return salida == 0
		else:
			salida = os.system("wget --no-cache http://www.theotherzone.com/wii/ntsc/"+IDGAME+".png")
			if (salida == 0):
				salida = os.system("mogrify -resize 160x225 "+IDGAME+".png")
				return salida == 0
			else:
				return False

def descargarTodasLasCaratula(DEVICE):
	listaIDGAME = getListaJuegos(DEVICE)
	ok = True
	for juego in listaIDGAME:
		if ( not descargarCaratula(juego[0]) ):
			ok = False
	return ok

def buscarParticionWBFS():
	global DETECTOR_WBFS , SALIDA_FORZADA , FABRICANTE
	DEVICE = ""
	salida = ""
	subProceso = getPopen(DETECTOR_WBFS)
	#Espera que acabe
	subProceso.wait()
	for linea in subProceso.stdout:
		salida = salida + linea

	# Le quito el ultimo salto de linea y forma la lista cortando por saltos de linea
	listaParticiones = []
	if (salida <> ""):
		listaParticiones = salida[:-1].split("\n")

	# Borramos los elementos que no contengan /dev/
	# los que tengan /dev/ se corta por : y se coge el primer cacho
	i = 0	
	while ( i  < len(listaParticiones) ):
		if(listaParticiones[i].find("/dev/") == -1):
			del listaParticiones[i]
		else: # es una particion WBFS
			i = i + 1

	if(len(listaParticiones) <= 0):
		print "No se ha encontrado ningun dispositivo USB con particion WBFS."
	elif(len(listaParticiones) > 1):
		print "Lista de particiones autodetectadas : "
		haElegido = False
		while( not haElegido ):
			i = 1
			for dispositivo in listaParticiones:
				print str(i) + " - Particion : " + dispositivo
				i = i + 1
			iSalir = str(i)
			print iSalir + " - Salir"	
			iElegido = raw_input("Elige la particion WBFS con la que va ha trabajar : ")
			if( iElegido == iSalir ):
				SALIDA_FORZADA = True
				haElegido = True
			else:
				try:
					DEVICE = listaParticiones[ int(iElegido) - 1 ]
					try:
						cachos = DEVICE.split(":")
						DEVICE = cachos[0]
						FABRICANTE = cachos[1]
					except:
						print "Error obteniendo el Fabricando del HD"
						SALIDA_FORZADA = True
					haElegido = True
				except IndexError:
					print "Fuera de rango"
				except ValueError:
					print "Valor incorrecto"
	else: # len(listaParticiones) == 1)
		DEVICE = listaParticiones[0]
		try:
			cachos = DEVICE.split(":")
			DEVICE = cachos[0]
			FABRICANTE = cachos[1]
		except:
			print "Error obteniendo el Fabricando del HD"
			SALIDA_FORZADA = True

	return DEVICE

def getListaUnica(lista):
	u = []
	for x in lista:
		if x not in u:
			u.append(x)
	return u

	

############## MAIN ###########################

'''
for parametro in sys.argv:
	print parametro
raw_input("Pulse cualquier tecla para continuar ...\n")
#exit(0)
'''

#Se puede forzar la salida por no aceptar el acuerdo
if( not comprobarExistencia(ACUERDO)):
	informarAcuerdo()

#Se puede forzar la salida por no encontrar particion
DEVICE = buscarParticionWBFS()

#Comprobamos si tiene algun juego
listaJuegos = getListaJuegos(DEVICE)
hayJuegos = len(listaJuegos) > 0

if ( not SALIDA_FORZADA ):

	for parametro in sys.argv:
		if ( parametro == sys.argv[0] ):
			pass
		elif( parametro == "-p" ):
			PAUSA = True
		elif( parametro.find("=") != -1 ):
			cacho_izq = parametro[:parametro.find("=")]
			cacho_der = parametro[parametro.find("=")+1:]
			if( cacho_izq=="--trabajo" or cacho_izq=="--work" ):
				if(os.path.isfile(cacho_der)):
					cacho_der = os.path.dirname(cacho_der)
				try:
					os.chdir(cacho_der)
				except:
					pass
		else:
			PARAMETROS.append(parametro)
	PARAMETROS = getListaUnica(PARAMETROS)
	numParametros = len(PARAMETROS)
	
	'''
	for parametro in PARAMETROS:
		print parametro
	'''

	if((numParametros == 0) or PARAMETROS[0].lower() == "listar" or PARAMETROS[0].lower() == "ls"):
		if(hayJuegos):
			print "Listando juegos de : " + DEVICE + " " + FABRICANTE
			listarISOs(DEVICE)
			mostrarEspacioLibre(DEVICE)				
		else:
			print "No tienes instalado ningún juego"
	elif ( PARAMETROS[0].lower() == "borrar" or PARAMETROS[0].lower() == "rm"): # rm
		if(hayJuegos):
			if(numParametros >= 2): # 2 parametros
				parametro = PARAMETROS[1]
				if (getExtension(parametro) == "iso"):
					IDGAME = getMagicISO(parametro)
				else:
					IDGAME = parametro
			else:
				IDGAME = get_IDJUEGO_de_Lista(DEVICE)
			print "Borrar juego con ID : " + IDGAME + " en particion " + DEVICE + " " + FABRICANTE
			if( borrarJuego(DEVICE , IDGAME) ):				
				print "Refrescando lista ..."
				if( comprobarExistencia(DEVICE) and listarISOs(DEVICE)>0 and mostrarEspacioLibre(DEVICE) ):
					print "juego " + IDGAME + " borrado correctamente"
				else:
					print "Error al refrescar"
			else:
				print "ERROR borrando el juego " + ID_JUEGO
		else:
			print "No hay Juegos para borrar"
			
	elif ( PARAMETROS[0].lower() == "caratula" or PARAMETROS[0].lower() == "cover"):
		if(hayJuegos):
			if(numParametros >= 2): # 2 parametros
				IDGAME = PARAMETROS[1]
			else:
				IDGAME = get_IDJUEGO_de_Lista(DEVICE)
			if(descargarCaratula(IDGAME)):
				print "OK, descargado " + IDGAME + ".png"
			else:
				print "ERROR, descargando " + IDGAME + ".png"
		else:
			print "No hay Juegos para descargar una caratula"
	elif ( PARAMETROS[0].lower() == "caratulas" or PARAMETROS[0].lower() == "covers"):
		if(hayJuegos):
			if(descargarTodasLasCaratula(DEVICE)):
				print "OK, todas las caratulas se han descagado"
			else:
				print "ERROR, descargando alguna caratula"
		else:
			print "No hay Juegos para descargar caratulas"
	elif ( PARAMETROS[0].lower() == "renombrar" or PARAMETROS[0].lower() == "rename" or PARAMETROS[0].lower() == "r"):
		if(hayJuegos):
			if(numParametros >= 3): # 3 parametros
				IDGAME = PARAMETROS[1]
				NUEVO_NOMBRE = PARAMETROS[2]
			else:
				IDGAME = get_IDJUEGO_de_Lista(DEVICE)
				NUEVO_NOMBRE = raw_input("Escriba el nuevo nombre : ")
			print "Renombrar juego ID : " + IDGAME + " como " + NUEVO_NOMBRE
			if ( renombrarISO(DEVICE , IDGAME , NUEVO_NOMBRE) ):
				print "Refrescando lista ..."
				if( comprobarExistencia(DEVICE) and listarISOs(DEVICE)>0 and mostrarEspacioLibre(DEVICE) ):
					print "ISO renombrada correctamente a \""+NUEVO_NOMBRE+"\""
				else:
					print "Renombrado OK aunque ocurrio un error al refrescar"
			else:
				print "ERROR al renombrar"
		else:
			print "No hay Juegos para renombrar"
	elif ( PARAMETROS[0].lower() == "extraer" or PARAMETROS[0].lower() == "x"):
		if(hayJuegos):
			if(numParametros >= 2): # 2 parametros
				ID_JUEGO = PARAMETROS[1]
			else:
				ID_JUEGO = get_IDJUEGO_de_Lista(DEVICE)
			print "Extraer ISO de juego con ID : " + ID_JUEGO + " en particion " + DEVICE + " " + FABRICANTE
			if( extraerJuego(DEVICE , ID_JUEGO) ):
				print "Juego " + ID_JUEGO + " extraido OK"
			else:
				print "ERROR extrayendo la ISO de "+ID_JUEGO
		else:
			print "No hay Juegos para extraer"
	elif ( PARAMETROS[0].lower() == "ayuda" or PARAMETROS[0].lower() == "h" or PARAMETROS[0].lower() == "-h" or PARAMETROS[0].lower() == "--help" or PARAMETROS[0].lower() == "help" ): #x
		print "Listar juegos. El programa por defecto, sin parametros, hace un listado de los juegos : \n\t\t" + os.path.basename(sys.argv[0]) + "\n"
		print "Añadir ISO mediante una lista explicita de las ISOS : \n\t\t" + os.path.basename(sys.argv[0]) + " \""+RUTA+"/wii/mario.iso\" \"iso2\" \"iso3\" \"isoN\"\n"
		print "Añadir ISO con exp. reg. La expresión solo afecta al directorio actual, actualmente no es recursivo : \n\t\t" + os.path.basename(sys.argv[0]) + " *.iso\n"
		print "Buscar y Añadir ISO's recursivamente. Busca todos las imagenes isos RECURSIVAMENTE, incluso tambien busca dentro de RAR, a falta de implementar zip), tal vez necesites sudo apt-get install rar.\n\t\t" + os.path.basename(sys.argv[0]) + " buscar\n"
		print "Borrar juegos. Especificando el juego mediante un menú.: \n\t\t" + os.path.basename(sys.argv[0]) + " borrar\n"
		print "Borrar juegos. Podemos borrar con el IDGAME.: \n\t\t" + os.path.basename(sys.argv[0]) + " borrar IDJUEGO\n"
		print "Borrar juegos. Podemos borrar con el IDGAME obtenido a partir de un ISO local. El archivo ISO local NO es borrado : \n\t\t" + os.path.basename(sys.argv[0]) + " borrar \""+RUTA+"/wii/mario.iso\"\n"
		print "Renombrar juegos. Especificando el juego mediante un menú.: \n\t\t" + os.path.basename(sys.argv[0]) + " renombrar\n"
		print "Renombrar juegos, puedes cambiar el nombre de los juegos ya metidos en HD, útil para que nos enteremos cuando estemos con el USB Loader : \n\t\t" + os.path.basename(sys.argv[0]) + " renombrar IDGAME \"Mario Kart Wii\"\n"
		print "Extraer juegos a un archivo ISO. El juego es especificado mediante un menú.\n\t\t" + os.path.basename(sys.argv[0]) + " extraer\n"
		print "Extraer juegos a un archivo ISO. OJO! : El archivo ISO de salida pertenecerá a root : \n\t\t" + os.path.basename(sys.argv[0]) + " extraer IDJUEGO\n"
		print "Descargar todas las caratulas automaticamente a 160x225. Ojo puede que el servidor te banee, si te ocurre intentalo 5 minutos más tarde: \n\t\t" + os.path.basename(sys.argv[0]) + " caratulas\n"
		print "Descargar la caratulas de un juego especificado por su IDGAME, la imagen es bajada a 160x225. El comando es un singular, es \"caratula\" ya que \"caratulas\" descarga todo: \n\t\t" + os.path.basename(sys.argv[0]) + " caratula IDGAME\n"
		print "Descargar la caratulas de un juego especificado por menú, la imagen es bajada a 160x225. El comando es un singular, es \"caratula\" ya que \"caratulas\" descarga todo: \n\t\t" + os.path.basename(sys.argv[0]) + " caratula\n"
		print
		print "Web : http://blogricardo.wordpress.com/2009/04/07/wiithon-wbfs-gui-para-wii"
	elif ( PARAMETROS[0].lower() == "buscar" or PARAMETROS[0].lower() == "meter" or PARAMETROS[0].lower() == "-r" or PARAMETROS[0].lower() == "metertodo" or PARAMETROS[0].lower() == "buscartodo"):
		print "Buscando Imagenes ISO dentro de RAR"
		# Busca todos los rar recursivamente, y descomprime en el directorio actual el ISO
		listaRAR = []
		listaRAR += rec_glob(".", "*.rar")
		if(len(listaRAR) > 0):
			print "Se van ha descomprimir todos los ISO que hay en los rar"
		for comprimido in listaRAR:
			print "Buscando ISO en " + comprimido
			# linea cojunuda, requiere un largo estudio xD entre escape del escape del escape de awk, bash y el propio python
			os.system("rar lt -c- \""+comprimido+"\" | grep '\.iso' | awk -F.iso  '{print $1}' | awk -F\" \"  '{print $0\".iso\"}' | sed 's/^ *//' | sed 's/ *$//' | awk '{system(\"rar e -o- \\\""+comprimido+"\\\" \\\"\"$0\"\\\"\")}'")

		print "Buscando Imagenes ISO"
		# Hacer un listados de todos los isos del directorio actual recursivamente
		listaISOS += rec_glob(".", "*.iso")
	else:
		#Los parametros es una lista de ISOS explicita
		for parametro in PARAMETROS:
			# si tiene caracteres raros -> no es expresión regular
			# porque de otro forma, peta la expresion regular.
			if(tieneCaracteresRaros(parametro)):
				expresionExpandida = [parametro]
			else:
				expresionExpandida = glob.glob(parametro)
			for archivo in expresionExpandida:
				if( os.path.isfile(archivo) and getExtension(archivo) == "iso" ):
					listaISOS.append(archivo)
		if (len(listaISOS) == 0):
			print "No se ha encontrado ninguna imagen ISO"

	#Ordenamos la lista
	listaISOS.sort()
	numImagenesISO = len(listaISOS)
	imagenesISOProcesadas=0

	if(numImagenesISO>0):
		for imagenISO in listaISOS:
			imagenesISOProcesadas = imagenesISOProcesadas + 1
			print "===================== "+os.path.basename(imagenISO)+" ("+str(imagenesISOProcesadas)+"/"+str(numImagenesISO)+") ===================="
			print "{"
			print "Añadir ISO : " + os.path.basename(imagenISO) + " a la particion " + DEVICE + " " + FABRICANTE
			if( comprobarExistencia(DEVICE) and comprobarExistencia(imagenISO) ):
				if ( anadirISO(DEVICE , imagenISO) ):
						mensaje = "ISO añadida correctamente"
						print "OK"
						print "}"
						print
						correctos.append(mensaje)
				else:
					mensaje = "ERROR añadiendo la ISO : " + imagenISO + " (comprueba que sea una ISO de WII)"
					print "ERROR"
					print "}"
					print
					erroneos.append(mensaje)
			else:
				mensaje = "ERROR la ISO o la partición no existe"
				print "ERROR"
				print "}"
				print
				erroneos.append(mensaje)

		print "================= INFORME DE RESULTADOS ========================="
		print "{"

		if(len(correctos) == imagenesISOProcesadas):
			print "\t{"
			print "\t================= Todo metido en el HD correctamente ==================="
			print "\t}"
		else:
			if(len(correctos) > 0):
				print "\t================ Juegos correctos ("+str(len(correctos))+"/"+str(imagenesISOProcesadas)+") =============="
				print "\t{"
				for mensaje in correctos:
					print "\t"+mensaje
				print "\t}"

		if(len(erroneos) > 0):
			print "\t=================== Juegos erroneos ("+str(len(erroneos))+"/"+str(imagenesISOProcesadas)+") ================="
			print "\t{"
			for mensaje in erroneos:
				print "\t"+mensaje
			print "\t}"

		print "}"

	# Pausa si hay algun parametro con -p y no es una salida forzada
	if (PAUSA):
		raw_input("Pulse cualquier tecla para continuar ...\n")

############################################################################################################################
